warning("There are no variables that are factors in the data set.")
} else {
brush_group <- ggplotly(gp, tooltip=c("x", "y", "label", "label1", "label2"), height=400) %>%
layout(dragmode="select") %>%
hide_legend() %>%
highlight(on="plotly_select", off= "plotly_deselect", color = "blue",
persistent=T, dynamic=T)
}
# tourr has rescale=T (so rescale first)
pc_rescale <- prcomp(rescale(Xdataset))
loads <- as.data.frame(pc_rescale$rotation)
# Note: signs of coeffs are random.
# We are interested in the magnitude of differences between the coefficients
# This reflects which var(s) the PC is contrasting between (see p357 MASS bk)
coeffs <- gather(loads, PC, coeff)
coeffs$X <- rep_len(rownames(loads), nrow(coeffs))
coeffs$sd <- rep(pc_rescale$sdev, each=p)
# Plot for coeffs
pc <- ggplot(coeffs, aes(x=PC, y=coeff, colour=sd, size=abs(coeff))) +
geom_point(aes(label=X)) +
geom_hline(yintercept = 0, colour="gray", lty=2) +
theme(legend.position = "none") +
scale_color_gradient(low = "#56B1F7", high = "#132B43") +
scale_size_area(max_size = 3) +
labs(title="Principal components")
pc_coeffs <- ggplotly(pc, tooltip = c("x", "y", "colour", "label"), height=400)
html <- tags$div(
style = "display: block;",
tags$div(tour, align = "center", style = "width: 100%; padding: 1em;"),
#tags$div(tour, style="width:50%; float:left;"),
tags$div(index, style="width:50%; float:left;"),
tags$div(brush_group, style="width:50%; float:left;"),
tags$div(pc_coeffs, style = "width: 50%; float:left;")
)
# opens in an interactive session
res <- html_print(html)
}
pp2D_xtalk(crabs, index = "holes")
library(crosstalk) # For (crosstalk+plotly) function
pp2D_xtalk(crabs, index = "holes")
library(htmltools)
pp2D_xtalk(crabs, index = "holes")
?scale
library(GGally)
?ggparcoord
head(crabs)
crabs <- crabs[-3] # Drop "index" variable since not used.
colnames(crabs)[1] <- "species"
head(crabs)
crabspcp <- ggparcoord(crabs, columns = 3:7, scale = "uniminmax")
ggplotly(crabspcp) %>%
highlight(on="plotly_select", off="plotly_deselect", persistent=TRUE, dynamic=TRUE)
ggparcoord
?rescale
head(crabs.long)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, fig.pos='center')
#options(knitr.table.format = "html")  # Can change globally to "latex" for pdf
# For cross referencing in html
library(bookdown)
# For including static graphics
library(knitr)
# For tables
library(kableExtra)
# For tidying of NCEA data
library(tidyr)
library(dplyr)
# For reading xls binary file for 2016 schools data
library(gdata)
# For plots
library(ggplot2)
# For interactivity
library(plotly)
library(shiny)
library(crosstalk)
# For crabs data
library(MASS)
# For tours
library(tourr)
pcp.crabs <- rescale(crabs.long) %>%
SharedData$new(key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species)) +
geom_line() +
geom_point(size=0.01)
head(crabs.long)
crabs2 <- rescale(crabs[3:7])
crabs.long <- gather(cbind(crabs[1:2], crabs2), "Measurement", "Length", 3:7)
head(crabs.long)
pcp.crabs <- crabs.long %>%
SharedData$new(key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species)) +
geom_line() +
geom_point(size=0.01)
crabs2 <- cbind(crabs[1:2], rescale(crabs[3:7]))
crabs2$ID <- rownames(crabs)
crabs2$ID <- rownames(crabs)
crabs.long <- gather(crabs2, "Measurement", "Length", 3:7)
head(crabs.long)
pcp.crabs <- crabs.long %>%
SharedData$new(key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species)) +
geom_line() +
geom_point(size=0.01)
ggplotly(pcp.crabs, tooltip=c("x", "y", "label", "label1")) %>%
highlight(on="plotly_select", off="plotly_deselect", color = "red")
head(crabs)
crabs2 <- cbind(crabs[1:2], rescale(crabs[3:7]))
head(rownames(crabs2))
head(rownames(crabs))
crabs_pcp <- function(df) {
df$ID <- rownames(df)
pcp <- SharedData$new(df, key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species)) +
geom_line() +
geom_point(size=0.01)
pcp.int <- ggplotly(pcp.crabs, tooltip=c("x", "y", "label", "label1")) %>%
highlight(on="plotly_select", off="plotly_deselect", color = "red")
return(pcp.int)
}
crabs_pcp(crabs)
rm(pcp.crabs)
crabs_pcp <- function(df) {
df$ID <- rownames(df)
pcp <- SharedData$new(df, key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species)) +
geom_line() +
geom_point(size=0.01)
pcp.int <- ggplotly(pcp, tooltip=c("x", "y", "label", "label1")) %>%
highlight(on="plotly_select", off="plotly_deselect", color = "red")
return(pcp.int)
}
crabs_pcp(crabs)
crabs %>%
gather("Measurement", "", 5:7) %>%
crabs_pcp()
head(crabs)
head(crabs2)
crabs3 <- crabs
crabs3$ID <- rownames(crabs)
head(crabs3)
crabs_pcp <- function(df) {
df$ID <- rownames(df)
pcp <- gather(df, "Measurement", "Length", 3:7) %>%
SharedData$new(key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species)) +
geom_line() +
geom_point(size=0.01)
pcp.int <- ggplotly(pcp, tooltip=c("x", "y", "label", "label1")) %>%
highlight(on="plotly_select", off="plotly_deselect", color = "red")
return(pcp.int)
}
crabs_pcp(crabs)
rm(crabs2)
rm(crabs3)
crabs2 <- cbind(crabs[1:2], rescale(crabs[3:7]))
crabs_pcp(crabs2)
?rescale
crabs_pcp <- function(df) {
df$ID <- rownames(df)
# Transform to a long data frame
pcp <- gather(df, "Measurement", "Length", 3:7) %>%
SharedData$new(key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species, colour=ID)) +
geom_line() +
geom_point(size=0.01)
pcp.int <- ggplotly(pcp, tooltip=c("x", "y", "label", "label1")) %>%
highlight(on="plotly_select", off="plotly_deselect", color = "red")
return(pcp.int)
}
crabs_pcp(crabs)
crabs_pcp <- function(df) {
df$ID <- rownames(df)
# Transform to a long data frame
pcp <- gather(df, "Measurement", "Length", 3:7) %>%
SharedData$new(key=~ID, group="crabs.pcp") %>%
ggplot(aes(x=Measurement, y=Length, group=ID, label=sex, label1=species)) +
geom_line() +
geom_point(size=0.01)
pcp.int <- ggplotly(pcp, tooltip=c("x", "y", "label", "label1")) %>%
highlight(on="plotly_select", off="plotly_deselect", color = "red")
return(pcp.int)
}
crabs_pcp(crabs)
crabs_pcp(crabs)
crabsSD <- SharedData$new(crabs, key=~rownames(crabs), group="one2one")
plot_ly(crabs, x=~CL, y=~RW)
CL_RW <- ggplot(crabsSD, aes(x=CL, y=RW)) +
geom_point()
ggplotly(CL_RW)
pp2D_xtalk(crabs, index = "holes")
t <- save_history(x, guided_tour(holes, d=2, max.tries = 50), rescale=FALSE, max=50))
t <- save_history(x, guided_tour(holes, d=2, max.tries = 50), rescale=FALSE, max=50)
t <- save_history(crabs[3:7], guided_tour(holes, d=2, max.tries = 50), rescale=FALSE, max=50)
?save_history
head(crabs)
?guided_tour
t <- save_history(crabs[3:7], guided_tour(holes, max.tries=50), max_bases=50)
str(t)
tinterp <- interpolate(t)
str(tinterp)
t <- save_history(Xdataset, guided_tour(holes, d=2, max.tries = 50), max=50)
t <- save_history(crabs[3:7], guided_tour(holes, d=2, max.tries = 50), max=50)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, fig.pos='center')
#options(knitr.table.format = "html")  # Can change globally to "latex" for pdf
# For cross referencing in html
library(bookdown)
# For including static graphics
library(knitr)
# For tables
library(kableExtra)
# For tidying of NCEA data
library(tidyr)
library(dplyr)
# For reading xls binary file for 2016 schools data
library(gdata)
# For plots
library(ggplot2)
# For interactivity
library(plotly)
library(shiny)
library(crosstalk)
# For crabs data
library(MASS)
# For tours
library(tourr)
#library(htmltools) Needed for tours?
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
?ggmatrix
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
source("files/guidedTour.R")
guidedTour_app(crabs, index = "holes")
source('~/Desktop/Project/slee205_Honours/Notes/MidSemReports/Current/files/guidedTour.R')
guidedTour_app(crabs, index = "holes")
source('~/Desktop/Project/slee205_Honours/Notes/MidSemReports/Current/files/guidedTour.R')
guidedTour_app(crabs, index = "holes")
source('~/Desktop/Project/slee205_Honours/Notes/MidSemReports/Current/files/guidedTour.R')
guidedTour_app(crabs, index = "holes")
guidedTour_app(crabs, index = "holes")
crabLog <- cbind(crabs[1:2], log(crabs[3:7]))
guidedTour_app(crabLog, index="holes", PC=FALSE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
guidedTour_app(crabLog, index="holes", PC=TRUE)
q()
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, fig.pos='center')
#options(knitr.table.format = "html")  # Can change globally to "latex" for pdf
# For cross referencing in html
library(bookdown)
# For including static graphics
library(knitr)
# For tables
#library(kableExtra)
# For tidying of NCEA data
library(tidyr)
library(dplyr)
# For reading xls binary file for 2016 schools data
library(gdata)
# For plots
library(ggplot2)
# For interactivity
library(plotly)
library(shiny)
library(crosstalk)
# For crabs data
library(MASS)
# For tours
library(tourr)
#library(htmltools) Needed for tours?
nzqa2016 <- read.csv("http://www.nzqa.govt.nz/assets/Studying-in-NZ/Secondary-school-and-NCEA/stats-reports/2016/Qualification-Statistics-School-2016-29032017.csv")
nzqa2016 <- nzqa2016[,-c(1,8,10)]
names(nzqa2016) <- c("Decile", "Region", "School", "Year", "Qualification", "Achieve_participate", "Achieve_roll", "Small_sch")
levels(nzqa2016$Qualification) <- c("L1", "L2", "L3", "UE")
nzqa <- nzqa2016 %>% filter(((Qualification=="L1") & (Year==11)) |
((Year==12) & (Qualification=="L2")) |
((Year==13) & (Qualification=="L3")) |
((Year==13) & (Qualification=="UE"))) %>%
# Reshape so that each row represents an observation (a school)
# Current.Achievement.Rate.Participation kept for analysis only
spread(Qualification, Achieve_participate, fill=0) %>%
group_by(School) %>%
summarise_at(c("L1", "L2", "L3", "UE"), sum) %>%
inner_join(nzqa2016[, c(1, 2, 3, 8)]) %>% # Add Decile and Region and Small_sch variables
distinct() %>%
filter(!((L1==0)&(L2==0)&(L3==0))) #Remove schools with 0% achievement rate for all levels
zeros <- function(col) {
replace(col, col==0, NA)
}
nzqa[2:5] <- sapply(nzqa[2:5], zeros)
names(nzqa2016) <- c("Decile", "Region", "School", "Year", "Qualification", "Achieve_participate", "Achieve_roll", "Small_sch")
levels(nzqa2016$Qualification) <- c("L1", "L2", "L3", "UE")
nzqa <- nzqa2016 %>% filter(((Qualification=="L1") & (Year==11)) |
((Year==12) & (Qualification=="L2")) |
((Year==13) & (Qualification=="L3")) |
((Year==13) & (Qualification=="UE"))) %>%
# Reshape so that each row represents an observation (a school)
# Current.Achievement.Rate.Participation kept for analysis only
spread(Qualification, Achieve_participate, fill=0) %>%
group_by(School) %>%
summarise_at(c("L1", "L2", "L3", "UE"), sum) %>%
inner_join(nzqa2016[, c(1, 2, 3, 8)]) %>% # Add Decile and Region and Small_sch variables
distinct() %>%
filter(!((L1==0)&(L2==0)&(L3==0))) #Remove schools with 0% achievement rate for all levels
zeros <- function(col) {
replace(col, col==0, NA)
}
nzqa[2:5] <- sapply(nzqa[2:5], zeros)
nzqa <- nzqa[nzqa$Small_sch=="",] # 439 school left
nzqa <- nzqa[, -8] # Remove Small_sch var
nzqa <- nzqa[complete.cases(nzqa),] # 408 NZ schools
nzqa$Decile <- as.factor(nzqa$Decile)
akl <- as.data.frame(nzqa[nzqa$Region=="Auckland", -7]) # 91 AKL schools
rownames(akl) <- akl$School # Need for tooltips in tour
kable(akl[-1, 1:3], booktabs=TRUE, caption="A subset of the **crabs** dataset. The data consists of two categorical variables and five real-valued variables.")
head(akl)
kable(akl[1:3, -1], booktabs=TRUE, caption="The first few schools from **NCEA** dataset. The data consists of two categorical variables and five real-valued variables.")
library(GGally)
library(shiny)
str(akl)
?ggparcoord
library(shiny)
ui <- fluidPage(
inputPanel(
selectInput("scaling", "Select axes scaling", choices=as.list("std", "uniminmax", "globalminmax"), selected="Decile")
),
mainPanel(plotOutput("pcp"))
)
server <- function(input, output) {
output$scale <- renderPlot(
ggparcoord(akl, columns=2:5, groupColumn="Decile", scale=input$scaling, title="Achievement of Auckland schools in 2016")
)
}
shinyApp(ui, server)
ui <- fluidPage(
inputPanel(
selectInput("scaling", "Select axes scaling", choices=as.list("std", "uniminmax", "globalminmax"), selected="std")
),
mainPanel(plotOutput("pcp"))
)
server <- function(input, output) {
output$scale <- renderPlot(
ggparcoord(akl, columns=2:5, groupColumn="Decile", scale=input$scaling, title="Achievement of Auckland schools in 2016")
)
}
shinyApp(ui, server)
ui <- fluidPage(
inputPanel(
radioButtons("scaling", "Select axes scaling", choices=c("std", "uniminmax", "globalminmax"), selected="std")
),
mainPanel(plotOutput("pcp"))
)
server <- function(input, output) {
output$scale <- renderPlot(
ggparcoord(akl, columns=2:5, groupColumn="Decile", scale=input$scaling, title="Achievement of Auckland schools in 2016")
)
}
shinyApp(ui, server)
ui <- fluidPage(
inputPanel(
radioButtons("scaling", "Select axes scaling", choices=c("std", "uniminmax", "globalminmax"), selected="std")
),
mainPanel(plotOutput("pcp"))
)
server <- function(input, output) {
output$pcp <- renderPlot(
ggparcoord(akl, columns=2:5, groupColumn="Decile", scale=input$scaling, title="Achievement of Auckland schools in 2016")
)
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons("scaling", "Select axes scaling", choices=c(
"Standardise univariately" = "std",
"Univariate min and max" = "uniminmax",
"Global min and max" = "globalminmax"), selected="std")
)
),
mainPanel(plotOutput("pcp", width="100%"))
)
server <- function(input, output) {
output$pcp <- renderPlot(
ggparcoord(akl, columns=2:5, groupColumn="Decile", scale=input$scaling, title="Achievement of Auckland schools in 2016")
)
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons("scaling", "Select axes scaling", choices=c(
"Standardise univariately" = "std",
"Univariate min and max" = "uniminmax",
"Global min and max" = "globalminmax"), selected="std")),
mainPanel(plotOutput("pcp", width="100%"))
)
)
server <- function(input, output) {
output$pcp <- renderPlot(
ggparcoord(akl, columns=2:5, groupColumn="Decile", scale=input$scaling, title="Achievement of Auckland schools in 2016")
)
}
shinyApp(ui, server)
library(rsconnect)
rsconnect::setAccountInfo(name='shanl33',
token='592B9A25811F9253CB57667C68074B52',
secret='hMrJjMsARaqWEWqcFlnpZRcLnSDiSWD9reKO/wxX')
rsconnect::setAccountInfo(name='shanl33',
token='592B9A25811F9253CB57667C68074B52',
secret='hMrJjMsARaqWEWqcFlnpZRcLnSDiSWD9reKO/wxX')
deployApp()
deployApp()
rsconnect::setAccountInfo(name='shanl33', token='96008E1375F999929BDA81D405F9E8B9', secret='POCkReQppdaiJHFzIr+8cbR/PEpOAyahTPZebgoz')
deployApp()
runApp('files/NZQApcp.R')
setwd("~/Desktop/Project/slee205_Honours/Notes/MidSemReports/Current/files")
deployApp()
q()
getwd()
load("nzqa.sch")
load("nzqa.sch.RData")
head(nzqa.sch)
# Updated data
nzqa2017 <- read.csv("https://www.nzqa.govt.nz/assets/Studying-in-NZ/Secondary-school-and-NCEA/stats-reports/2017/Qualification-Statistics-School-2017-28032018.csv")
head(nzqa2017)
summary(nzqa2017)
nrow(nzqa2017)
nrow(nzqa2017)/4
colnames(nzqa2017)
# Drop vars that will not be used (eg. cumulative achievement)
nzqa2017 <- nzqa2017[,-c(1,8,10)]
names(nzqa2017) <- c("Decile", "Region", "School", "Year", "Qualification", "Achieve_participate", "Achieve_roll", "Small_sch")
head(nzqa2017)
levels(nzqa2017$Qualification) <- c("L1", "L2", "L3", "UE")
# Subset to use only Year 11 with Level 1, etc
nzqa <- nzqa2017 %>% filter(((Qualification=="L1") & (Year==11)) |
((Year==12) & (Qualification=="L2")) |
((Year==13) & (Qualification=="L3")) |
((Year==13) & (Qualification=="UE"))) %>%
# Reshape so that each row represents an observation (a school)
# Current.Achievement.Rate.Participation kept for analysis only
spread(Qualification, Achieve_participate, fill=0) %>%
group_by(School) %>%
summarise_at(c("L1", "L2", "L3", "UE"), sum) %>%
inner_join(nzqa2017[, c(1, 2, 3, 8)]) %>% # Add Decile and Region and Small_sch variables
distinct() %>%
filter(!((L1==0)&(L2==0)&(L3==0))) #Remove schools with 0% achievement rate for all levels
# Function to replace 0% with NA
zeros <- function(col) {
replace(col, col==0, NA)
}
nzqa[2:5] <- sapply(nzqa[2:5], zeros)
# Subset to use only Year 11 with Level 1, etc
nzqa <- nzqa2017 %>% filter(((Qualification=="L1") & (Year==11)) |
((Year==12) & (Qualification=="L2")) |
((Year==13) & (Qualification=="L3")) |
((Year==13) & (Qualification=="UE"))) %>%
# Reshape so that each row represents an observation (a school)
# Current.Achievement.Rate.Participation kept for analysis only
spread(Qualification, Achieve_participate, fill=0) %>%
group_by(School) %>%
summarise_at(c("L1", "L2", "L3", "UE"), sum) %>%
inner_join(nzqa2017[, c(1, 2, 3, 8)]) %>% # Add Decile and Region and Small_sch variables
distinct() %>%
filter(!((L1==0)&(L2==0)&(L3==0))) #Remove schools with 0% achievement rate for all levels
library(dplyr)
# Subset to use only Year 11 with Level 1, etc
nzqa <- nzqa2017 %>% filter(((Qualification=="L1") & (Year==11)) |
((Year==12) & (Qualification=="L2")) |
((Year==13) & (Qualification=="L3")) |
((Year==13) & (Qualification=="UE"))) %>%
# Reshape so that each row represents an observation (a school)
# Current.Achievement.Rate.Participation kept for analysis only
spread(Qualification, Achieve_participate, fill=0) %>%
group_by(School) %>%
summarise_at(c("L1", "L2", "L3", "UE"), sum) %>%
inner_join(nzqa2017[, c(1, 2, 3, 8)]) %>% # Add Decile and Region and Small_sch variables
distinct() %>%
filter(!((L1==0)&(L2==0)&(L3==0))) #Remove schools with 0% achievement rate for all levels
library(tidyverse)
# Subset to use only Year 11 with Level 1, etc
nzqa <- nzqa2017 %>% filter(((Qualification=="L1") & (Year==11)) |
((Year==12) & (Qualification=="L2")) |
((Year==13) & (Qualification=="L3")) |
((Year==13) & (Qualification=="UE"))) %>%
# Reshape so that each row represents an observation (a school)
# Current.Achievement.Rate.Participation kept for analysis only
spread(Qualification, Achieve_participate, fill=0) %>%
group_by(School) %>%
summarise_at(c("L1", "L2", "L3", "UE"), sum) %>%
inner_join(nzqa2017[, c(1, 2, 3, 8)]) %>% # Add Decile and Region and Small_sch variables
distinct() %>%
filter(!((L1==0)&(L2==0)&(L3==0))) #Remove schools with 0% achievement rate for all levels
head(nzqa)
nzqa[2:5] <- sapply(nzqa[2:5], zeros)
summary(nzqa)
q()
