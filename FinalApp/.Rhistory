q()
library(MASS)
library(ggplot2)
library(plotly)
library(shiny)
data("crabs")
?factor
data("crabs")
crabs <- crabs[-3] # Drop "index" variable since not used.
colnames(crabs)[1] <- "species"
crabs$selected <- factor(rep_len("0", nrow(crabs)), levels=c("0", "1"))
ggplot(crabs, aes(x=CL, y=RW, fill=selected)) +
geom_point()
p <- ggplot(crabs, aes(x=CL, y=RW, fill=selected)) +
geom_point() +
theme(legend.position="none")
ggplot(crabs, aes(x=CL, y=RW, fill=sex)) +
geom_point()
ggplot(crabs, aes(x=CL, y=RW, color=sex)) +
geom_point()
ggplot(crabs, aes(x=CL, y=RW, color=selected)) +
geom_point()
ggplot(crabs, aes(x=CL, y=RW, colour=selected)) +
geom_point(colour=c("grey", "red")) +
theme(legend.position="none")
ggplot(crabs, aes(x=CL, y=RW, colour=sex)) +
geom_point(colour=c("grey", "red")) +
theme(legend.position="none")
levels(crabs$selected)
ggplot(crabs, aes(x=CL, y=RW, colour=selected)) +
geom_point(colour="black") +
theme(legend.position="none")
crabs$ID <- rownames(crabs)
crabs[1, "sex"]
crabs[1, "sex"] == crabs["sex"]
crabs[1, "sex"] == crabs$sex
which(crabs[1, "sex"] == crabs$sex)
head(crabs)
data("crabs")
crabs <- crabs[-3] # Drop "index" variable since not used.
colnames(crabs)[1] <- "species"
crabs$ID <- rownames(crabs)
ui <- fluidPage(
plotlyOutput("scatter"),
verbatimTextOutput("brush")
)
server <- function(input, output, session) {
output$scatter <- renderPlotly({
p <- ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point()
# Record brush details
s <- event_data("plotly_selected", source = "sp1")
# If brushed, subset by sex and colour
if(length(s)) {
rowBrushed <- s$key
subsetCrabs <- crabs[which(crabs[rowBrushed, "sex"]==crabs$sex), ]
p2 <- p +
geom_point(subsetCrabs, aes(CL, y=RW, key=ID), colour="red")
ggp <- ggplotly(p2)
} else {
ggp <- ggplotly(p, source="sp1") %>% layout(dragmode = "select")
}
return(ggp)
})
output$brush <- renderPrint({
s <- event_data("plotly_selected", source = "sp1")
if (is.null(s)) "Click and drag to brush (double-click to clear)"
else s
})
}
shinyApp(ui, server)
rowBrushed <- 200
subsetCrabs <- crabs[which(crabs[rowBrushed, "sex"]==crabs$sex), ]
head(subsetCrabs)
p <- ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point()
p +
geom_point(subsetCrabs, aes(CL, y=RW, key=ID), colour="red")
p
p +
geom_point(subsetCrabs, aes(x=CL, y=RW, key=ID), colour="red")
ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point() +
geom_point(data=subsetCrabs, aes(x=CL, y=RW, key=ID), colour="red")
server <- function(input, output, session) {
output$scatter <- renderPlotly({
p <- ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point()
# Record brush details
s <- event_data("plotly_selected", source = "sp1")
# If brushed, subset by sex and colour
if(length(s)) {
rowBrushed <- s$key
subsetCrabs <- crabs[which(crabs[rowBrushed, "sex"]==crabs$sex), ]
p2 <- p +
geom_point(data=subsetCrabs, aes(x=CL, y=RW, key=ID), colour="red")
ggp <- ggplotly(p2)
} else {
ggp <- ggplotly(p, source="sp1") %>% layout(dragmode = "select")
}
return(ggp)
})
output$brush <- renderPrint({
s <- event_data("plotly_selected", source = "sp1")
if (is.null(s)) "Click and drag to brush (double-click to clear)"
else s
})
}
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
q()
library(crosstalk)
?SharedData
library(shiny); runApp('~/Desktop/Project/catBrushShiny/catBrushApp.R')
setwd("~/Desktop/Project/Honours_Report/FinalApp")
library(ggplot2)
library(plotly)
library(tourr)
library(crosstalk)
library(shiny)
#library(htmltools)
library(tidyr) # For PCs reshaping output for plot
library(GGally)
load("data/akl.RData")
head(akl)
str(akl)
runApp('guidedTour2.R')
runApp('guidedTour2.R')
runApp('guidedTour2.R')
head(akl)
ggplot(akl, aes(x=Decile)) + geom_jitter()
ggplot(akl, aes(x=Decile, y=0)) + geom_jitter()
gp <- ggplot(akl, aes(x=Decile, y=0)) +
geom_jitter(aes(label=ID), width=0, height=0.25)
gp
ggplot(akl, aes(x=Decile, y=0)) +
geom_jitter(aes(label=School), width=0, height=0.25)
ggplot(akl, aes(x=Decile, y=0)) +
geom_jitter(aes(label=School), width=0, height=0.25) +
theme(axis.ticks.y=element_blank(),
axis.text.y=element_blank())
ggplot(akl, aes(x=Decile, y=0)) +
geom_jitter(aes(label=School), width=0, height=0.25) +
theme(axis.ticks.y=element_blank(),
axis.text.y=element_blank(),
axis.title.y=element_blank())
runApp('guidedTour2.R')
runApp('guidedTour2.R')
runApp('guidedTour2.R')
runApp('guidedTour2.R')
runApp('guidedTour2.R')
runApp('guidedTour2.R')
runApp('guidedTour2.R')
?scale_x_discrete
ggpcp2 <- function(df, a=1, sd.group=NULL) {
# Transform df to a long data frame
df$ID <- rownames(df)
long <- gather(df, "Qualification", "Achievement", c("L1", "L2", "L3", "UE"))
# Static PCP
pcp.static <- long %>% SharedData$new(key=~ID, group=sd.group) %>%
ggplot(aes(x=Qualification, y=Achievement, group=ID)) +
geom_line(alpha=a) +
geom_point(alpha=a, size=0.01) +
scale_x_discrete(limits=c(-0.5, 3)) +
labs(x="Qualification level", y="Achievement rate") +
theme(legend.position="none")
return(pcp.static)
}
ggpcp2(akl)
ggpcp2(df=akl)
ggpcp2 <- function(df, a=1, sd.group=NULL) {
# Transform df to a long data frame
df$ID <- rownames(df)
long <- gather(df, "Qualification", "Achievement", c("L1", "L2", "L3", "UE"))
# Static PCP
pcp.static <- long %>% SharedData$new(key=~ID, group=sd.group) %>%
ggplot(aes(x=Qualification, y=Achievement, group=ID)) +
geom_line(alpha=a) +
geom_point(alpha=a, size=0.01) +
scale_x_discrete(breaks=c("L1", "L2", "L3", "UE")) +
labs(x="Qualification level", y="Achievement rate") +
theme(legend.position="none")
return(pcp.static)
}
ggpcp2(akl)
ggplotly()
ggpcp2 <- function(df, a=1, sd.group=NULL) {
# Transform df to a long data frame
df$ID <- rownames(df)
long <- gather(df, "Qualification", "Achievement", c("L1", "L2", "L3", "UE"))
# Static PCP
pcp.static <- long %>% SharedData$new(key=~ID, group=sd.group) %>%
ggplot(aes(x=Qualification, y=Achievement, group=ID)) +
geom_line(alpha=a) +
geom_point(alpha=a, size=0.01) +
#scale_x_discrete(breaks=c("L1", "L2", "L3", "UE")) +
labs(x="Qualification level", y="Achievement rate") +
theme(legend.position="none")
return(pcp.static)
}
ggpcp2(akl)
ggplotly()
runApp('guidedTour2.R')
head(akl)
runApp('guidedTour2.R')
runApp('guidedTour2.R')
q()
