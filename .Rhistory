q()
library(MASS)
library(ggplot2)
library(plotly)
library(shiny)
data("crabs")
?factor
data("crabs")
crabs <- crabs[-3] # Drop "index" variable since not used.
colnames(crabs)[1] <- "species"
crabs$selected <- factor(rep_len("0", nrow(crabs)), levels=c("0", "1"))
ggplot(crabs, aes(x=CL, y=RW, fill=selected)) +
geom_point()
p <- ggplot(crabs, aes(x=CL, y=RW, fill=selected)) +
geom_point() +
theme(legend.position="none")
ggplot(crabs, aes(x=CL, y=RW, fill=sex)) +
geom_point()
ggplot(crabs, aes(x=CL, y=RW, color=sex)) +
geom_point()
ggplot(crabs, aes(x=CL, y=RW, color=selected)) +
geom_point()
ggplot(crabs, aes(x=CL, y=RW, colour=selected)) +
geom_point(colour=c("grey", "red")) +
theme(legend.position="none")
ggplot(crabs, aes(x=CL, y=RW, colour=sex)) +
geom_point(colour=c("grey", "red")) +
theme(legend.position="none")
levels(crabs$selected)
ggplot(crabs, aes(x=CL, y=RW, colour=selected)) +
geom_point(colour="black") +
theme(legend.position="none")
crabs$ID <- rownames(crabs)
crabs[1, "sex"]
crabs[1, "sex"] == crabs["sex"]
crabs[1, "sex"] == crabs$sex
which(crabs[1, "sex"] == crabs$sex)
head(crabs)
data("crabs")
crabs <- crabs[-3] # Drop "index" variable since not used.
colnames(crabs)[1] <- "species"
crabs$ID <- rownames(crabs)
ui <- fluidPage(
plotlyOutput("scatter"),
verbatimTextOutput("brush")
)
server <- function(input, output, session) {
output$scatter <- renderPlotly({
p <- ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point()
# Record brush details
s <- event_data("plotly_selected", source = "sp1")
# If brushed, subset by sex and colour
if(length(s)) {
rowBrushed <- s$key
subsetCrabs <- crabs[which(crabs[rowBrushed, "sex"]==crabs$sex), ]
p2 <- p +
geom_point(subsetCrabs, aes(CL, y=RW, key=ID), colour="red")
ggp <- ggplotly(p2)
} else {
ggp <- ggplotly(p, source="sp1") %>% layout(dragmode = "select")
}
return(ggp)
})
output$brush <- renderPrint({
s <- event_data("plotly_selected", source = "sp1")
if (is.null(s)) "Click and drag to brush (double-click to clear)"
else s
})
}
shinyApp(ui, server)
rowBrushed <- 200
subsetCrabs <- crabs[which(crabs[rowBrushed, "sex"]==crabs$sex), ]
head(subsetCrabs)
p <- ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point()
p +
geom_point(subsetCrabs, aes(CL, y=RW, key=ID), colour="red")
p
p +
geom_point(subsetCrabs, aes(x=CL, y=RW, key=ID), colour="red")
ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point() +
geom_point(data=subsetCrabs, aes(x=CL, y=RW, key=ID), colour="red")
server <- function(input, output, session) {
output$scatter <- renderPlotly({
p <- ggplot(crabs, aes(x=CL, y=RW, key=ID)) +
geom_point()
# Record brush details
s <- event_data("plotly_selected", source = "sp1")
# If brushed, subset by sex and colour
if(length(s)) {
rowBrushed <- s$key
subsetCrabs <- crabs[which(crabs[rowBrushed, "sex"]==crabs$sex), ]
p2 <- p +
geom_point(data=subsetCrabs, aes(x=CL, y=RW, key=ID), colour="red")
ggp <- ggplotly(p2)
} else {
ggp <- ggplotly(p, source="sp1") %>% layout(dragmode = "select")
}
return(ggp)
})
output$brush <- renderPrint({
s <- event_data("plotly_selected", source = "sp1")
if (is.null(s)) "Click and drag to brush (double-click to clear)"
else s
})
}
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
runApp('~/Desktop/Project/catBrushApp.R')
q()
q()
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, fig.align='center', out.width="80%")
knitr::opts_chunk$set(out.extra='style="display:block; margin:auto;"')
#options(knitr.table.format = "html")  # Can change globally to "latex" for pdf
# For cross referencing in html
library(bookdown)
# For including static graphics
library(knitr)
# For tables
#library(kableExtra)
# For tidying of NCEA data
library(tidyr)
library(dplyr)
# For reading xls binary file for 2016 schools data
library(gdata)
# For plots
library(ggplot2)
# For interactivity
library(plotly)
library(shiny)
library(crosstalk)
# For crabs data
library(MASS)
# For tours
library(tourr)
#library(htmltools) Needed for tours?
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, fig.align='center', out.width="80%")
#knitr::opts_chunk$set(out.extra='style="display:block; margin:auto;"')
#options(knitr.table.format = "html")  # Can change globally to "latex" for pdf
# For cross referencing in html
library(bookdown)
# For including static graphics
library(knitr)
# For tables
#library(kableExtra)
# For tidying of NCEA data
library(tidyr)
library(dplyr)
# For reading xls binary file for 2016 schools data
library(gdata)
# For plots
library(ggplot2)
# For interactivity
library(plotly)
library(shiny)
library(crosstalk)
# For crabs data
library(MASS)
# For tours
library(tourr)
#library(htmltools) Needed for tours?
data("crabs")
crabs <- crabs[-3] # Drop "index" variable since not used.
colnames(crabs)[1] <- "species"
crabsSD <- SharedData$new(crabs, key=~rownames(crabs), group="one2one")
sex_sp <- ggplot(crabsSD, aes(x=species, y=sex)) +
geom_jitter(width=0.25, height=0.25)
CL_RW <- ggplot(crabsSD, aes(x=CL, y=RW)) +
geom_point()
bscols(sex_sp, CL_RW)
?SharedData
"
""
)
?
()
q()
